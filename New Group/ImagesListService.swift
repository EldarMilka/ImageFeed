//
//  ImagesListService.swift
//  ImageFeed
//
//  Created by –≠–ª—å–¥–∞—Ä –ú–∏–ª–∫–∞–º–∞–Ω–∞–≤–∏—á—é—Å on 06.09.2025.
//
import Foundation

final class ImagesListService {
    private(set) var photos: [Photo] = []
    private var lastLoadedPage: Int?
    private var perPage: Int = 10
    private var currentTask: URLSessionTask?
    private let urlSession = URLSession.shared
    private let oauth2TokenStorage = OAuth2TokenStorage.shared
    
    static let didChangeNotification = Notification.Name(rawValue: "ImagesListServiceDidChange")
    static let shared = ImagesListService()
    
    private init() {}
    
    func fetchPhotosNextPage() {
        print("üü°üü°üü° ImagesListService: fetchPhotosNextPage –í–´–ó–í–ê–ù")
        
        guard currentTask == nil else {
            print("‚ùå ImagesListService: –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ü–†–û–ü–£–°–ö–ê–ï–ú")
            return
        }
        
        // ‚úÖ –ü–†–û–í–ï–†–¨ OAuth –¢–û–ö–ï–ù
        guard let token = oauth2TokenStorage.token else {
            print("‚ùå‚ùå‚ùå ImagesListService: OAuth —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        }
        
        print("üü° ImagesListService: –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth —Ç–æ–∫–µ–Ω - \(token.prefix(10))...")
        
        let nextPage = (lastLoadedPage ?? 0) + 1
        print("üü° ImagesListService: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É \(nextPage)")
      
        guard let url = URL(string: "https://api.unsplash.com/photos?page=\(nextPage)&per_page=\(perPage)") else {
            print("‚ùå ImagesListService: –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            return
        }
        
        var request = URLRequest(url: url)
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ AccessKey
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        print("üü° ImagesListService: URL - \(url)")
        print("üü° ImagesListService: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        currentTask = urlSession.dataTask(with: request) { [weak self] data, response, error in
            guard let self = self else { return }
            
            defer {
                self.currentTask = nil
                print("üü° ImagesListService: –ó–∞–¥–∞—á–∞ –ó–ê–í–ï–†–®–ï–ù–ê")
            }
            
            print("üü° ImagesListService: –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            
            if let error = error {
                print("‚ùå ImagesListService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - \(error)")
                return
            }
            
            if let httpResponse = response as? HTTPURLResponse {
                print("üü° ImagesListService: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ - \(httpResponse.statusCode)")
                if httpResponse.statusCode != 200 {
                    print("‚ùå ImagesListService: HTTP –æ—à–∏–±–∫–∞ - \(httpResponse.statusCode)")
                }
            }
            
            guard let data = data else {
                print("‚ùå ImagesListService: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return
            }
            
            print("üü° ImagesListService: –ü–æ–ª—É—á–µ–Ω–æ \(data.count) –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
            if let responseString = String(data: data, encoding: .utf8)?.prefix(300) {
                print("üü° ImagesListService: –û—Ç–≤–µ—Ç: \(responseString)")
            }
            
            do {
                let photosResults = try JSONDecoder().decode([PhotoResult].self, from: data)
                print("‚úÖ‚úÖ‚úÖ ImagesListService: –£–°–ü–ï–®–ù–û –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ \(photosResults.count) —Ñ–æ—Ç–æ")
                
                let newPhotos = photosResults.map { self.convert(photoResult: $0)}
                
                DispatchQueue.main.async {
                    self.lastLoadedPage = nextPage
                    self.photos.append(contentsOf: newPhotos)
                    
                    print("‚úÖ ImagesListService: –î–æ–±–∞–≤–ª–µ–Ω–æ \(newPhotos.count) —Ñ–æ—Ç–æ. –í—Å–µ–≥–æ: \(self.photos.count)")
                    
                    NotificationCenter.default.post(
                        name: ImagesListService.didChangeNotification,
                        object: self)
                    
                    print("‚úÖ ImagesListService: –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                }
            } catch {
                print("‚ùå ImagesListService: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è - \(error)")
            }
        }
        currentTask?.resume()
        print("üü° ImagesListService: –ó–∞–¥–∞—á–∞ –ó–ê–ü–£–©–ï–ù–ê")
    }
    
    
    //–ª–∞–π–∫–∏
    func changeLike(photoId: String, isLike:Bool, _ completion: @escaping (Result<Void, Error>) -> Void ) {
        print("üü° ImagesListService: –ú–µ–Ω—è–µ–º –ª–∞–π–∫ - photoId: \(photoId), isLike: \(isLike)")
        
        let endpoint = "/photos/\(photoId)/like"
        let httpMethod = isLike ? "POST" : "DELETE"
        
        guard let url = URL(string: "https://api.unsplash.com\(endpoint)") else {
            print("‚ùå ImagesListService: –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –ª–∞–π–∫–∞")
            completion(.failure(NetworkError.urlSessionError))
            return
        }
        guard let token = oauth2TokenStorage.token else {
            print("‚ùå ImagesListService: OAuth —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            completion(.failure(NetworkError.urlSessionError))
            return
        }
        var request = URLRequest(url: url)
        request.httpMethod = httpMethod
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        print("üü° ImagesListService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º \(httpMethod) –∑–∞–ø—Ä–æ—Å –Ω–∞ \(url)")
        
        let task = urlSession.dataTask(with: request) { data , responce, error in
            if let error = error{
                print("‚ùå ImagesListService: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - \(error)")
                DispatchQueue.main.async {
                    completion(.failure(error))
                }
                return
            }
            
            if let httpResponse = responce as? HTTPURLResponse {
                print("üü° ImagesListService: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ - \(httpResponse.statusCode)")
                
                if 200..<300 ~= httpResponse.statusCode {
                    print("‚úÖ ImagesListService: –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ \(isLike ? "–ø–æ—Å—Ç–∞–≤–ª–µ–Ω" : "—É–¥–∞–ª–µ–Ω")")
                    DispatchQueue.main.async {
                        if let index = self.photos.firstIndex(where: { $0.id == photoId }) {
                                    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–æ—Ç–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ª–∞–π–∫–∞
                                    var updatedPhoto = self.photos[index]
                                    updatedPhoto.isLiked = isLike
                                    self.photos[index] = updatedPhoto
                                    
                                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                                    NotificationCenter.default.post(
                                        name: ImagesListService.didChangeNotification,
                                        object: self
                                    )
                                }
                        completion(.success(()))
                    }
                }else {
                    print("‚ùå ImagesListService: HTTP –æ—à–∏–±–∫–∞ - \(httpResponse.statusCode)")
                    DispatchQueue.main.async {
                        completion(.failure(NetworkError.httpStatusCode(httpResponse.statusCode)))
                    }
                }
            }
        }
        task.resume()
    }
    
    private func convert(photoResult: PhotoResult) -> Photo {
        let dateFormatter = ISO8601DateFormatter()
        let createdAt = photoResult.createdAt.flatMap { dateFormatter.date(from: $0) }
        
        return Photo(
            id: photoResult.id ?? "",
            size: CGSize(width: photoResult.width ?? 0, height: photoResult.height ?? 0),
            createdAt: createdAt,
            welcomeDescription: photoResult.description,
            thumbImageURL: photoResult.urls.thumb ?? "",
            largeImageURL: photoResult.urls.regular ?? "",
            fullImageUrl: photoResult.urls.full ?? "",
            isLiked: photoResult.likedByUser ?? false
        )
    }
    
    func clean() {
        photos = []
        lastLoadedPage = nil
        currentTask?.cancel()
        currentTask = nil
    }
}
